@page "/passwordGenerator"

@using Core.Application.Dtos;
@using Core.Domain.Utilities;
@using Core.Domain.Enums;
@using PasswordManager.Blazor.Constants;
@inject IJSRuntime _jsRuntime;
@inject IToastService _toastService;
@inject ILocalStorageService _localStorageService;

<PageTitle>Password Generator</PageTitle>
<BlazoredToasts />

<div class="container">
    <div class="card mt-3 bg-light">

        <div class="card-header">
            <div class="card-title pt-2 text-center">
                <div class="titleText h2">Create secure passwords </div>
            </div>
        </div>

        <div class="card-body bg-white">
            <div class="row">
                <div class="col-md-9">
                    <p class="h4">@password</p>
                </div>

                <div class="col-md-1">
                    <!--Save icon-->
                    <svg @onclick="async () => await AddPasswordToFavoritesAsync()" xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-save icon-click" viewBox="0 0 16 16">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                    </svg>
                </div>

                <div class="col-md-1">
                    <!--Clipboard icon-->
                    <svg @onclick="@(() => CopyPasswordToClipBoardAsync())" xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-clipboard icon-click" viewBox="0 0 16 16">
                        <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                        <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                    </svg>
                </div>

                <div class="col-md-1">
                    <!--Refresh icon-->
                    <svg @onclick="RegeneratePassword" xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-arrow-clockwise icon-click" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z" />
                    </svg>
                </div>
            </div>
        </div>

        <div class="card-footer bg-light">
            <div class="alert @alertColor rounded passwordColorCheck mt-3"></div>
        </div>

    </div>

    <div class="card mt-4 bg-white">
        <div class="card-body bg-light">
            <div class="card-title text-center ">
                <div class="titleText h2">Choose your password length</div>
            </div>

            <div class="mt-2 text-center">
                <div class="form-label">
                    Password Length <span class="badge @alertColor">@generatePasswordDto.Length</span>
                </div>

                <input type="range" class="form-range" @bind="generatePasswordDto.Length" @oninput="OnInputChange" min="4" max="30" step="1" />
            </div>
        </div>

        <div class="card-footer bg-white pt-3 pb-3">

            <div class="d-flex flex-row justify-content-center">
                <div class="inputLocate">
                    <label for="number">Numbers</label>
                    <input type="checkbox" class="form-check-input" @bind="generatePasswordDto.IncludeNumbers" @oninput="@((args) => CheckboxOnInput(args, GeneratePasswordType.Number))" name="numbers" />
                </div>

                <div class="inputLocate">
                    <label for="lowerCases">Lowercase Characters</label>
                    <input type="checkbox" class="form-check-input" @bind="generatePasswordDto.IncludeLowerCaseCharacters" @oninput="@((args) => CheckboxOnInput(args,GeneratePasswordType.Lowercase))" name="lowerCases" />
                </div>

                <div class="inputLocate">
                    <label for="upperCases">Uppercase Characters</label>
                    <input type="checkbox" class="form-check-input" @bind="generatePasswordDto.IncludeUpperCaseCharacters" @oninput="@((args) => CheckboxOnInput(args,GeneratePasswordType.Uppercase))" name="upperCases" />
                </div>

                <div class="inputLocate">
                    <label for="specialChars">Special Characters</label>
                    <input type="checkbox" class="form-check-input" @bind="generatePasswordDto.IncludeSpecialCaseCharacters" @oninput="@((args) => CheckboxOnInput(args,GeneratePasswordType.SpecialChars))" name="specialChars" />
                </div>
            </div>

        </div>
    </div>
    @if (!string.IsNullOrEmpty(errorResponseMessage))
    {
        <div class="alert alert-danger mt-3 text-center" role="alert">@errorResponseMessage</div>
    }

    <div class="card bg-light mt-4">
        <div class="card-title pt-3 h2 text-center titleText">
            Favorite Passwords
        </div>
        <div class="card-body bg-white">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Password</th>
                        <th scope="col">Security Level</th>
                        <th scope="col">Creation Conditions</th>
                    </tr>
                </thead>
                @{
                    int count = 0;
                }
                @foreach (var detail in GetFavoritePasswordDetails())
                {
                    count++;

                    var password = detail.Split(";")[0];
                    var securityLevel = detail.Split(";")[1];
                    var creationConditions = detail.Split(";")[2];

                    <tr>
                        <td>@count</td>
                        <td class="icon-click" @onclick="() => CopyPasswordToClipBoardAsync()">@password</td>
                        <td><div class="alert @securityLevel mt-2 w-50"></div></td>
                        <td>@creationConditions</td>
                        <td><button @onclick="async () => await RemoveFavoritePasswordAsync(detail)" type="button" class="btn btn-outline-danger text-center">X</button></td>
                    </tr>
                }
                <tbody>
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <button @onclick="async () => await RemovePasswordsFromFavoritesAsync()" type="button" class="btn btn-danger float-md-end">CLEAR</button>
        </div>
    </div>

</div>

@code {

    GeneratePasswordDto generatePasswordDto = new();
    string password = "";
    PasswordGenerator passwordGenerator = new();
    string errorResponseMessage = "";
    string alertColor = PasswordSecurityMessage.LowLevelPassword;
    List<string> favoritePasswords = new();

    private void OnInputChange(ChangeEventArgs args)
    {
        errorResponseMessage = "";

        var isAllCheckBoxSelected = CheckAnyCheckboxSelected(generatePasswordDto);
        if (!isAllCheckBoxSelected)
            return;

        var passwordLength = Convert.ToInt32(args.Value);
        generatePasswordDto.Length = passwordLength;
        alertColor = GetAlertColor(passwordLength);

        password = passwordGenerator.Generate(generatePasswordDto);
    }

    private string GetAlertColor(int passwordLength)
    {
        switch (passwordLength)
        {
            case var length when (length >= PasswordSecurityLength.DefaultLevelPassword && length < PasswordSecurityLength.LowLevelPassword):
                return PasswordSecurityMessage.LowLevelPassword;

            case var length when (length >= PasswordSecurityLength.LowLevelPassword && length < PasswordSecurityLength.MidLevelPassword):
                return PasswordSecurityMessage.MidLevelPassword;

            case var length when (length >= PasswordSecurityLength.MidLevelPassword && length <= PasswordSecurityLength.HighLevelPassword):
                return PasswordSecurityMessage.HighLevelPassword;

            default:
                throw new Exception("Geçersiz şifre uzunluğu girildi!");
        }
    }

    private void RegeneratePassword()
    {
        var isAllCheckBoxSelected = CheckAnyCheckboxSelected(generatePasswordDto);
        if (!isAllCheckBoxSelected)
            return;

        GeneratePassword();
    }

    private ValueTask CopyPasswordToClipBoardAsync()
    {
        _toastService.ShowSuccess(ToasterResponseMessages.Success.CopiedSuccessfully);

        return _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private void CheckboxOnInput(ChangeEventArgs args, GeneratePasswordType type)
    {
        errorResponseMessage = "";

        var isChecked = Convert.ToBoolean(args.Value);

        switch (type)
        {
            case GeneratePasswordType.Number:
                generatePasswordDto.IncludeNumbers = isChecked;
                break;

            case GeneratePasswordType.Lowercase:
                generatePasswordDto.IncludeLowerCaseCharacters = isChecked;
                break;

            case GeneratePasswordType.Uppercase:
                generatePasswordDto.IncludeUpperCaseCharacters = isChecked;
                break;

            case GeneratePasswordType.SpecialChars:
                generatePasswordDto.IncludeSpecialCaseCharacters = isChecked;
                break;

            default:
                throw new Exception("Beklenmedik bir checkbox adı geldi.");
        }

        var isAllCheckBoxSelected = CheckAnyCheckboxSelected(generatePasswordDto);
        if (!isAllCheckBoxSelected)
            return;

        GeneratePassword();
    }

    protected override async Task OnInitializedAsync()
    {
        generatePasswordDto.Length = PasswordSecurityLength.DefaultLevelPassword;
        GeneratePassword();

        var storedPasswords = await _localStorageService.GetItemAsync<List<string>>("storedPasswords");

        if (storedPasswords is null || !storedPasswords.Any()){ return; }

        favoritePasswords = storedPasswords;
    }

    private bool CheckAnyCheckboxSelected(GeneratePasswordDto generatePasswordDto)
    {
        if (!generatePasswordDto.IncludeNumbers && !generatePasswordDto.IncludeLowerCaseCharacters
            && !generatePasswordDto.IncludeUpperCaseCharacters && !generatePasswordDto.IncludeSpecialCaseCharacters)
        {
            errorResponseMessage = "Lütfen en az bir tane şifre oluşturma koşulu seçiniz.";
            return false;
        }
        return true;
    }

    private void GeneratePassword()
    {
        password = passwordGenerator.Generate(generatePasswordDto);
    }

    private ValueTask SavePasswordAsync()
    {
        return _localStorageService.SetItemAsync("storedPasswords", favoritePasswords);
    }

    private async Task AddPasswordToFavoritesAsync()
    {
        var passwordCreationConditions = passwordGenerator.GetPasswordCreationConditions(generatePasswordDto);

        var passwordDetail = $"{password};{GetAlertColor(password.Length)};{passwordCreationConditions}";

        var passwords = favoritePasswords.Select(x => x.Split(";")[0]).ToList();

        if (passwords.Contains(password))
        {
            _toastService.ShowWarning(ToasterResponseMessages.Warning.PasswordAlreadySaved);
            return;
        }

        favoritePasswords.Add(passwordDetail);
        await SavePasswordAsync();
    }

    private ValueTask RemovePasswordsFromFavoritesAsync()
    {
        if(!favoritePasswords.Any()){ _toastService.ShowError(ToasterResponseMessages.Error.NotFoundFavoritePasswordForDelete); }

        favoritePasswords.Clear();
        return _localStorageService.RemoveItemAsync("storedPasswords");
    }

    private async Task RemoveFavoritePasswordAsync(string item)
    {
        _toastService.ShowSuccess(ToasterResponseMessages.Success.FavoritePasswordDeleted);

        favoritePasswords.Remove(item);

        await _localStorageService.SetItemAsync<List<string>>("storedPasswords", favoritePasswords);
    }

    private List<string> GetFavoritePasswordDetails()
    {
        return favoritePasswords;
    }
}

<style>

    hr {
        margin: 0;
    }

    .passwordColorCheck {
        width: auto;
        height: 30px;
    }

    .inputLocate {
        margin-left: 20px;
    }

    .icon-click {
        cursor: pointer;
    }

    .titleText {
        color: aquamarine;
        font-weight: bolder;
        -webkit-text-stroke: medium;
        -webkit-text-stroke-color: black;
    }

</style>
